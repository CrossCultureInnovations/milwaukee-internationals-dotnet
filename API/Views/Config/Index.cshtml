@using DAL.Interfaces
@using Microsoft.AspNetCore.Mvc.Rendering
@using Models.Constants
@model Models.Entities.GlobalConfigs
@inject IConfigLogic ConfigLogic
@{
    ViewBag.Title = "Configuration";
    Layout = "_Layout";
    var selectedYear = Model.YearValue;
    var selectedTheme = Model.Theme;
}

<div class="container-fluid">
@using (Html.BeginForm("UpdateConfig", "Config", FormMethod.Post))
{
    @Html.TextBoxFor(x => x.Id, new { @class = "hidden" })

    <div class="form-group">
        @Html.LabelFor(x => x.YearValue, "Select a year context (for viewing and editing only)")
        @Html.DropDownListFor(x => x.YearValue, ConfigLogic.GetYears().Select(x => new SelectListItem {Text = x.ToString(), Value = x.ToString(), Selected = x == selectedYear}), new {@class = "form-control"})
    </div>
    
    <div class="form-group" ng-init="locationWizardFeature = @Model.LocationWizardFeature.ToString().ToLower(); locationWizardFeature_val = locationWizardFeature">
        @Html.LabelFor(x => x.LocationWizardFeature)
        @Html.CheckBoxFor(x => x.LocationWizardFeature, new { @class = "form-control hidden", ng_model = "locationWizardFeature_val" })
        <toggle class="pull-right" ng-model="locationWizardFeature" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="locationWizardFeature_val = locationWizardFeature"></toggle>
    </div> 

    <div class="form-group" ng-init="enableEmailTestMode = @Model.EmailTestMode.ToString().ToLower(); enableEmailTestMode_val = enableEmailTestMode">
        @Html.LabelFor(x => x.EmailTestMode)
        @Html.CheckBoxFor(x => x.EmailTestMode, new { @class = "form-control hidden", ng_model = "enableEmailTestMode_val" })
        <toggle class="pull-right" ng-model="enableEmailTestMode" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="enableEmailTestMode_val = enableEmailTestMode"></toggle>
    </div> 
    
    <div class="form-group" ng-init="enableSmsTestMode = @Model.SmsTestMode.ToString().ToLower(); enableSmsTestMode_val = enableSmsTestMode">
        @Html.LabelFor(x => x.SmsTestMode)
        @Html.CheckBoxFor(x => x.SmsTestMode, new { @class = "form-control " +
                                                             "hidden", ng_model = "enableSmsTestMode_val" })
        <toggle class="pull-right" ng-model="enableSmsTestMode" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="enableSmsTestMode_val = enableSmsTestMode"></toggle>
    </div> 
    
    <div class="form-group" ng-init="enableEventFeature = @Model.EventFeature.ToString().ToLower(); enableEventFeature_val = enableEventFeature">
        @Html.LabelFor(x => x.EventFeature)
        @Html.CheckBoxFor(x => x.EventFeature, new { @class = "form-control hidden", ng_model = "enableEventFeature_val" })
        <toggle class="pull-right" ng-model="enableEventFeature" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="enableEventFeature_val = enableEventFeature"></toggle>
    </div>
    
    <div class="form-group" ng-init="disallowDuplicateStudents = @Model.DisallowDuplicateStudents.ToString().ToLower(); disallowDuplicateStudents_val = disallowDuplicateStudents">
        @Html.LabelFor(x => x.DisallowDuplicateStudents)
        @Html.CheckBoxFor(x => x.DisallowDuplicateStudents, new { @class = "form-control hidden", ng_model = "disallowDuplicateStudents_val" })
        <toggle class="pull-right" ng-model="disallowDuplicateStudents" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="disallowDuplicateStudents_val = disallowDuplicateStudents"></toggle>
    </div>
    
    <div class="form-group" ng-init="recordApiEvents = @Model.RecordApiEvents.ToString().ToLower(); recordApiEvents_val = recordApiEvents">
        @Html.LabelFor(x => x.RecordApiEvents)
        @Html.CheckBoxFor(x => x.RecordApiEvents, new { @class = "form-control hidden", ng_model = "recordApiEvents_val" })
        <toggle class="pull-right" ng-model="recordApiEvents" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="recordApiEvents_val = recordApiEvents"></toggle>
    </div>
    
    <div class="form-group" ng-init="qrInStudentEmail = @Model.QrInStudentEmail.ToString().ToLower(); qrInStudentEmail_val = qrInStudentEmail">
        @Html.LabelFor(x => x.QrInStudentEmail)
        @Html.CheckBoxFor(x => x.QrInStudentEmail, new { @class = "form-control hidden", ng_model = "qrInStudentEmail_val" })
        <toggle class="pull-right" ng-model="qrInStudentEmail" on="Enable" off="Disable" onstyle="btn-primary" offstyle="btn-default" ng-change="qrInStudentEmail_val = qrInStudentEmail"></toggle>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.MaxLimitStudentSeats, $"Max upper limit of students for [{DateTime.Now.Year}] year")
        @Html.TextBoxFor(x => x.MaxLimitStudentSeats, new { @class = "form-control", type = "number", required = true })
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.MaxLimitDrivers, $"Max upper limit of drivers for [{DateTime.Now.Year}] year")
        @Html.TextBoxFor(x => x.MaxLimitDrivers, new { @class = "form-control", type = "number", required = true })
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.TourDate)
        @Html.EditorFor(x => x.TourDate, new { @class = "form-control", type = "datetime-local", placeholder = "Enter date", required = "required"})
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.ArrivalTimeForHost)
        @Html.EditorFor(x => x.ArrivalTimeForHost, new { @class = "form-control", type = "datetime-local", placeholder = "Enter date", required = "required"})
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.TourLocation)
        @Html.TextBoxFor(x => x.TourLocation, new { @class = "form-control", type = "text", required = true })
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.TourAddress)
        @Html.TextBoxFor(x => x.TourAddress, new { @class = "form-control", type = "text", required = true })
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.Theme)
        @Html.DropDownListFor(x => x.Theme, ApplicationConstants.Themes.Select(x => new SelectListItem {Text = x.Key, Value = x.Key, Selected = x.Key == selectedTheme}), new {@class = "form-control"})
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.EmailSenderOnBehalf) <a href="https://app.mailjet.com/account/sender" target="_blank">[mailjet]</a>
        @Html.TextBoxFor(x => x.EmailSenderOnBehalf, new { @class = "form-control", type = "email", required = true })
    </div>
    
    <div class="form-group" style="margin-top: 1rem;">
        <button type="submit" class="btn btn-success">Save Configuration</button>
    </div>
}
</div>