@using CaseExtensions
@model List<Models.ViewModels.StatsViewModel>

@{
    ViewBag.Title = "Statistics";
    Layout = "_Layout";
    var allCountries = Model.SelectMany(x => x.CountryDistribution.Select(y => y.Key)).Distinct().OrderBy(x => x).ToList();
}

<div class="container">
    <div class="page-header">
        <h3>
            Website Statistics
            <small>(@Model.Count total years, @Model.Count(x => x.ActiveYear) active years)</small>
        </h3>
    </div>

    <table class="table table-hover table-bordered">
        <thead>
        <tr>
            <th>Year</th>
            <th>Count Students</th>
            <th>Count Drivers</th>
            <th>Count Navigators</th>
            <th>Count Hosts</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var stat in Model)
        {
            <tr>
                <td class="@(stat.CurrentYear ? "active" : !stat.ActiveYear ? "danger" : "success")">@stat.Year</td>
                <td>@stat.CountStudents + @stat.CountDependents (@stat.CountDistinctCountries countries)</td>
                <td>@stat.CountDrivers</td>
                <td>@stat.CountNavigators</td>
                <td>@stat.CountHosts</td>
            </tr>
        }
        </tbody>
    </table>

    <hr />
    
    <div class="list-group">
        <div class="list-group-item list-group-item-success">Student from countries that signed up just this year</div>
        <div class="list-group-item list-group-item-danger">Student from countries that are missing this year</div>
    </div>

    <table class="table table-hover table-bordered">
        <thead>
        <tr>
            <th>Country (@(allCountries.Count))</th>

            @foreach (var stat in Model.Where(stat => stat.ActiveYear))
            {
                <th class="@(stat.CurrentYear ? "active" : "")">@stat.Year</th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var country in allCountries)
        {
            var newCountryThisYear = !Model.Any(x => !x.CurrentYear && x.ActiveYear && x.CountryDistribution.ContainsKey(country));
            var missedCountryThisYear = Model.Any(x => x.CurrentYear && x.ActiveYear && !x.CountryDistribution.ContainsKey(country));
            var countFromThisCountry = Model.Where(x => x.ActiveYear).Sum(x => x.CountryDistribution.GetValueOrDefault(country, 0));
            
            <tr class="@(newCountryThisYear ? "success" : missedCountryThisYear ? "danger" : "")">
                <td>@country.ToTrainCase() (@(countFromThisCountry))</td>

                @foreach (var stat in Model.Where(stat => stat.ActiveYear))
                {
                    <td>@(stat.CountryDistribution.ContainsKey(country))</td>
                }
            </tr>
        }
        </tbody>
    </table>
    
    <hr />

    <div class="container" ng-controller="statsCtrl">

        <div class="container">
            <div class="row">
                <div class="col-sm-9">
                    <div ng-show="countryDistributionChartData.length">
                        <canvas id="pie" class="chart chart-pie"
                                chart-data="countryDistributionChartData" chart-labels="countryDistributionChartLabels">
                        </canvas>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="dropdown">
                        <button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown">
                            Year: {{ year }}
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu">
                            <li ng-repeat="(year, _) in countryDistribution">
                                <a href="#" ng-click="handleYearChange($event)" data-year="{{ year }}">{{ year }}</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>


    </div>

</div>