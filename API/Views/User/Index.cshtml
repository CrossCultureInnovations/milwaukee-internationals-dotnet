@using System.Globalization
@using API.Interfaces
@using Models.Enums
@using Models.Extensions
@model IEnumerable<Models.Entities.User>
@inject IHttpRequestUtilityBuilder RequestUtilityBuilder;

@{
    ViewBag.Title = "Users";
    Layout = "_Layout";
    var userInfo = await RequestUtilityBuilder.For(Context).GetUserInfo();
}

<div class="container-fluid" ng-controller="userListCtrl">
    <div class="page-header">
        <h3>List of Users <small>(Count: @Model.Count())</small></h3>

        @if (userInfo.UserRoleEnum == UserRoleEnum.Admin)
        {
            <div class="row">
                <div class="col-sm-5 col-sm-offset-7 col-md-4 col-md-offset-8 col-lg-3 col-lg-offset-9">
                    <div class="pull-right">
                        <toggle ng-model="showDetail" on="Hide detail" off="Show detail" size="btn" onstyle="btn-success" offstyle="btn-danger" toggle-class="quick"></toggle>
                    </div>
                </div>
            </div>
        }
    </div>

    <table class="table table-hover table-bordered">
        <thead>
        <tr>
            <th>
                Fullname
                <a href="?sortBy=fullname&descending=false">
                    <span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span>
                </a>
                <a href="?sortBy=fullname&descending=true">
                    <span class="glyphicon glyphicon-arrow-up" aria-hidden="true"></span>
                </a>
            </th>
            <th>Email</th>
            <th class="hidden-sm hidden-xs">Phone</th>
            <th class="hidden-sm hidden-xs">Enabled</th>
            <th class="hidden-sm hidden-xs">Username</th>
            <th class="hidden-sm hidden-xs">Role</th>
            <th class="hidden-sm hidden-xs">LastLoggedInDate</th>

            @if (userInfo.UserRoleEnum == UserRoleEnum.Admin)
            {
                <th class="hidden-xs" ng-show="showDetail">Action</th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var user in Model)
        {
            var disabled = userInfo.Username == user.UserName;
            var hideDisabledUsers = !user.Enable ? @"ng-show=""showDetail""" : "";

            <tr class="@(!user.Enable ? "danger" : "")" @Html.Raw(hideDisabledUsers)>
                <td>@user.Fullname</td>
                <td>@user.Email</td>
                <td class="hidden-sm hidden-xs">@user.PhoneNumber</td>
                <td class="hidden-sm hidden-xs">@user.Enable</td>
                <td class="hidden-sm hidden-xs">@user.UserName</td>
                <td class="hidden-sm hidden-xs">@user.UserRoleEnum</td>
                <td class="hidden-sm hidden-xs">@user.LastLoggedInDate.ToCentralTime().DateTime.ToString(CultureInfo.InvariantCulture)</td>

                @if (userInfo.UserRoleEnum == UserRoleEnum.Admin)
                {
                    <td class="hidden-xs" ng-show="showDetail">
                        <div class="btn-group-vertical btn-group-sm">
                            <a href="~/User/Edit/@user.Id" class="btn btn-primary">Edit</a>
                            <a href="~/User/PasswordReset/@user.Id" class="btn btn-primary">Set Password</a>

                            @if (disabled)
                            {
                                switch (user.UserRoleEnum)
                                {
                                    case UserRoleEnum.Basic:
                                        <a href="" class="btn btn-primary disabled">Set Admin</a>
                                        break;
                                    case UserRoleEnum.Admin:
                                        <a href="" class="btn btn-primary disabled">Set Basic</a>
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }
                                <a href="" class="btn btn-warning disabled">Disable</a>
                                <a href="" class="btn btn-danger disabled">Delete</a>
                            }
                            else
                            {
                                switch (user.UserRoleEnum)
                                {
                                    case UserRoleEnum.Basic:
                                        <a href="~/User/updateUserRole/@user.Id/@UserRoleEnum.Admin" class="btn btn-primary" validate-before-going data-message="Are you sure to assign admin role to this user (@(user.Fullname))?">Set Admin</a>
                                        break;
                                    case UserRoleEnum.Admin:
                                        <a href="~/User/UpdateUserRole/@user.Id/@UserRoleEnum.Basic" class="btn btn-primary" validate-before-going data-message="Are you sure to assign basic role to this user (@(user.Fullname))?">Set Basic</a>
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }

                                @if (user.Enable)
                                {
                                    <a href="~/User/disable/@user.Id" class="btn btn-warning" validate-before-going data-message="Are you sure to disable this user (@(user.Fullname))?">Disable</a>
                                }
                                else
                                {
                                    <a href="~/User/enable/@user.Id" class="btn btn-success" validate-before-going data-message="Are you sure to enable this user (@(user.Fullname))?">Enable</a>
                                }

                                <a href="~/User/delete/@user.Id" class="btn btn-danger" validate-before-going data-message="Are you sure to delete this user (@(user.Fullname))?">Delete</a>
                            }
                        </div>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>

</div>